import os


wpt_root = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))


def read_owners(path):
    owners = []
    with open(path, "r") as in_f:
        for line in in_f:
            line = line.strip()
            if line.startswith("@"):
                owners.append(line)
    return set(owners)


def main():
    out_path = os.path.join(wpt_root, "CODEOWNERS")
    stack = []
    output = []
    for dir_path, dir_names, files in os.walk(wpt_root):
        rel_path = os.path.relpath(dir_path, wpt_root).replace(os.path.sep, "/")
        if rel_path.startswith("."):
            rel_path = rel_path[1:]

        # Remove paths that are not parents of this path
        while stack and not rel_path.startswith(stack[-1][0]):
            stack.pop()

        if stack:
            owners = stack[-1][1].copy()
        else:
            owners = set()

        has_owners = "OWNERS" in files
        if has_owners:
            owners |= read_owners(os.path.join(dir_path, "OWNERS"))

        output.append((rel_path, owners, has_owners))
        stack.append(output[-1])

    # Only keep the paths for which owners were added
    keep = sorted((item for item in output if item[-1]), key=lambda x:x[0].split("/"))

    with open(out_path, "wb") as out_f:
        out_f.write(
            "# AUTOGENERATED FILE DO NOT EDIT\n"
            "#\n"
            "# To update this file edit the OWNERS files in each directory.\n"
            "# Inclusion in this file acts as review notification but doesn't\n"
            "# imply any further obligations.\n\n")
        for path, owners, _ in keep:
            out_f.write("%s/* %s\n" % (path, " ".join(sorted(owners))))
