// DO NOT EDIT! This test has been generated by /html/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.fillStyle.CSSHSL
// Description:CSSHSL works as color input
// Note:

importScripts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("CSSHSL works as color input");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

var offscreenCanvas = new OffscreenCanvas(100, 50);
var ctx = offscreenCanvas.getContext('2d');

ctx.fillStyle = new CSSHSL(CSS.deg(180), 0.5, 0.5);
ctx.fillRect(0, 0, 100, 50);
_assertPixelApprox(offscreenCanvas, 50,25, 64,191,191,255, "50,25", "64,191,191,255", 3);

const color = new CSSHSL(CSS.deg(180), 1, 1);
ctx.fillStyle = color;
_assertSame(ctx.fillStyle, '#ffffff', "ctx.fillStyle", "'#ffffff'");
ctx.fillRect(0, 0, 100, 50);
_assertPixel(offscreenCanvas, 50,25, 255,255,255,255, "50,25", "255,255,255,255");
color.l = 0.5;
ctx.fillStyle = color;
_assertSame(ctx.fillStyle, '#00ffff', "ctx.fillStyle", "'#00ffff'");
ctx.fillRect(0, 0, 100, 50);
_assertPixel(offscreenCanvas, 50,25, 0,255,255,255, "50,25", "0,255,255,255");

ctx.fillStyle = new CSSRGB(1, 0, 1).toHSL();
_assertSame(ctx.fillStyle, '#ff00ff', "ctx.fillStyle", "'#ff00ff'");
ctx.fillRect(0, 0, 100, 50);
_assertPixel(offscreenCanvas, 50,25, 255,0,255,255, "50,25", "255,0,255,255");
t.done();

});
done();
