// GENERATED CONTENT - DO NOT EDIT
// Content was automatically extracted by Reffy into reffy-reports
// (https://github.com/tidoust/reffy-reports)
// Source: Web MIDI API (http://webaudio.github.io/web-midi-api/)

WebIDLpartial interface Navigator {
  [SecureContext]
  Promise <MIDIAccess> requestMIDIAccess(optional MIDIOptions options = {});
};

WebIDLdictionary MIDIOptions {
  boolean sysex;
  boolean software;
};

WebIDL[SecureContext, Exposed=Window] interface MIDIInputMap {
  readonly maplike <DOMString, MIDIInput>;
};

WebIDL[SecureContext, Exposed=Window] interface MIDIOutputMap {
  readonly maplike <DOMString, MIDIOutput>;
};

WebIDL[SecureContext, Exposed=Window] interface MIDIAccess: EventTarget {
  readonly attribute MIDIInputMap inputs;
  readonly attribute MIDIOutputMap outputs;
  attribute EventHandler onstatechange;
  readonly attribute boolean sysexEnabled;
};

WebIDL[SecureContext, Exposed=Window] interface MIDIPort: EventTarget {
  readonly attribute DOMString id;
  readonly attribute DOMString? manufacturer;
  readonly attribute DOMString? name;
  readonly attribute MIDIPortType type;
  readonly attribute DOMString? version;
  readonly attribute MIDIPortDeviceState state;
  readonly attribute MIDIPortConnectionState connection;
  attribute EventHandler onstatechange;
  Promise <MIDIPort> open();
  Promise <MIDIPort> close();
};

WebIDL[SecureContext, Exposed=Window] interface MIDIInput: MIDIPort {
  attribute EventHandler onmidimessage;
};

WebIDL[SecureContext, Exposed=Window] interface MIDIOutput : MIDIPort {
  void send(sequence<octet> data, optional DOMHighResTimeStamp timestamp = 0);
  void clear();
};

WebIDLenum MIDIPortType {
  "input",
  "output",
};

WebIDLenum MIDIPortDeviceState {
  "disconnected",
  "connected",
};

WebIDLenum MIDIPortConnectionState {
  "open",
  "closed",
  "pending",
};

WebIDL[SecureContext, Exposed=Window]
interface MIDIMessageEvent : Event {
  constructor(DOMString type, optional MIDIMessageEventInit eventInitDict = {});
  readonly attribute Uint8Array data;
};

WebIDLdictionary MIDIMessageEventInit: EventInit {
  Uint8Array data;
};

WebIDL[SecureContext, Exposed=Window]
interface MIDIConnectionEvent : Event {
  constructor(DOMString type, optional MIDIConnectionEventInit eventInitDict = {});
  readonly attribute MIDIPort port;
};

WebIDLdictionary MIDIConnectionEventInit: EventInit {
  MIDIPort port;
};
