<!DOCTYPE html>
<meta charset="utf-8">
<title>Values</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="support.js"></script>

<script>
// BigInt and BigInt wrappers are supported in serialization, per
// https://github.com/whatwg/html/pull/3480
// This support allows them to be used as IndexedDB values.

let i = 0;
function value(value, test, name) {
    async_test(t => {
        t.step(function() {
            assert_true(test(value),
                        "condition does not apply to initial value");
        });

        createdb(t).onupgradeneeded = t.step_func(e => {
            e.target.result
                    .createObjectStore("store")
                    .add(value, 1);

            e.target.onsuccess = t.step_func(function(e) {
                e.target.result
                        .transaction("store")
                        .objectStore("store")
                        .get(1)
                        .onsuccess = t.step_func(function(e)
                {
                    assert_true(test(e.target.result),
                                "condition does not apply to deserialized result")
                    t.done();
                });
            });
        });
    }, "BigInts as values in IndexedDB - " + name);
}

value(1n,
      x => x === 1n,
      "primitive BigInt");
value(Object(1n),
      x => typeof x === 'object' &&
           x instanceof BigInt &&
           x.valueOf() === 1n,
      "BigInt object");
value({val: 1n},
      x => x.val === 1n,
      "primitive BigInt inside object");
value({val: Object(1n)},
      x => x.val === 1n &&
           x.val instanceof BigInt &&
           x.val.valueOf() === 1n,
      "BigInt object inside object");

// However, BigInt is not supported as an IndexedDB key; support
// has been proposed in the following PR, but that change has not
// landed at the time this patch was written
// https://github.com/w3c/IndexedDB/pull/231

function invalidKey(key, name) {
    async_test(t => {
        createdb(t).onupgradeneeded = t.step_func(e => {
            let store = e.target.result.createObjectStore("store")
            assert_throws('DataError', () => store.add(1, key));
            t.done();
        });
    }, "BigInts as keys in IndexedDB - " + name);
}

invalidKey(1n, "primitive BigInt");
// Still an error even if the IndexedDB patch lands
invalidKey(Object(1n), "BigInt object");
</script>
