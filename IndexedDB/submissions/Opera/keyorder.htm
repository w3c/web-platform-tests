<!DOCTYPE html>
<meta charset="utf-8">
<title>Key sort order</title>
<meta name=timeout content=long>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="support.js"></script>

<script>
    function keysort(desc, unsorted, expected) {
        var db,
          t = async_test("Database readback sort - " + desc, { timeout: 10000 });

        // The database test
        var open_rq = createdb(t);
        open_rq.onupgradeneeded = function(e) {
            db = e.target.result;
            var objStore = db.createObjectStore("store");

            for (var i = 0; i < unsorted.length; i++)
                objStore.add("value", unsorted[i]);
        };

        open_rq.onsuccess = function(e) {
            var actual_keys = [],
              rq = db.transaction("store")
                     .objectStore("store")
                     .openCursor();

            rq.onsuccess = t.step_func(function(e) {
                var cursor = e.target.result;

                if (cursor) {
                    actual_keys.push(cursor.key.valueOf());
                    cursor.continue();
                }
                else {
                    assert_object_equals(actual_keys, expected, "keyorder array");
                    assert_equals(actual_keys.length, expected.length, "array length");

                    t.done();
                }
            });
        };

        // The IDBKey.cmp test
        test(function () {
            var sorted = unsorted.slice(0).sort(function(a, b) { return indexedDB.cmp(a, b)});

            for (var i in sorted)
                if (typeof sorted[i] === "object" && 'valueOf' in sorted[i])
                    sorted[i] = sorted[i].valueOf();

            assert_object_equals(sorted, expected, "sorted array");

        }, "IDBKey.cmp sorted - " + desc);
    }

    var now = new Date(),
        one_sec_ago = new Date(now - 1000),
        one_min_future = new Date(now.getTime() + (1000*60));

    keysort('String < Array',
        [ [0], "yo", "", [] ],
        [ "", "yo", [], [0] ]);

    keysort('float < String',
        [ Infinity, "yo", 0, "", 100 ],
        [ 0, 100, Infinity, "", "yo" ]);

    keysort('float < Date',
        [ now, 0, 9999999999999, -0.22 ],
        [ -0.22, 0, 9999999999999, now.valueOf() ]);

    keysort('float < Date < String < Array',
        [ [], "", now, [0], "-1", 0, 9999999999999, ],
        [ 0, 9999999999999, now.valueOf(), "", "-1", [], [0] ]);


    keysort('Date(1 sec ago) < Date(now) < Date(1 minute in future)',
        [ now, one_sec_ago, one_min_future ],
        [ one_sec_ago.valueOf(), now.valueOf(), one_min_future.valueOf() ]);

    keysort('-1.1 < 1 < 1.01337 < 1.013373 < 2',
        [ 1.013373, 2, 1.01337, -1.1, 1 ],
        [ -1.1, 1, 1.01337, 1.013373, 2 ]);

    keysort('-Infinity < -0.01 < 0 < Infinity',
        [ 0, -0.01, -Infinity, Infinity ],
        [ -Infinity, -0.01, 0, Infinity ]);

    keysort('"" < "a" < "ab" < "b" < "ba"',
        [ "a", "ba", "", "b", "ab" ],
        [ "", "a", "ab", "b", "ba" ]);

    keysort('Arrays',
        [ [[0]], [0], [], [0, 0], [0, [0]] ],
        [ [], [0], [0, 0], [0, [0]], [[0]] ]);

    var big_array = [], bigger_array = [];
    for (var i=0; i < 10000; i++) {
        big_array.push(i);
        bigger_array.push(i);
    }
    bigger_array.push(0);

    keysort('Array.length: 10,000 < Array.length: 10,001',
        [ bigger_array, [0, 2, 3], [0], [9], big_array ],
        [ [0], big_array, bigger_array, [0, 2, 3], [9] ]);

    keysort('Infinity inside arrays',
        [ [Infinity, 1], [Infinity, Infinity], [1, 1],
            [1, Infinity], [1, -Infinity], [-Infinity, Infinity] ],
        [ [-Infinity, Infinity], [1, -Infinity], [1, 1],
            [1, Infinity], [Infinity, 1], [Infinity, Infinity] ]);


    keysort('Test different stuff at once',
        [
          now,
          [0, []],
          "test",
          1,
          ["a", [1, [-1]]],
          ["b", "a"],
          [ 0, 2, "c"],
          ["a", [1, 2]],
          [],
          [0, [], 3],
          ["a", "b"],
          [ 1, 2 ],
          ["a", "b", "c"],
          one_sec_ago,
          [ 0, "b", "c"],
          Infinity,
          -Infinity,
          2.55,
          [ 0, now ],
          [1]
        ],
        [
          -Infinity,
          1,
          2.55,
          Infinity,
          one_sec_ago.valueOf(),
          now.valueOf(),
          "test",
          [],
          [0 ,2, "c"],
          [0, now.valueOf()],
          [0, "b", "c"],
          [0, []],
          [0, [], 3],
          [1],
          [1, 2],
          ["a", "b"],
          ["a", "b", "c"],
          ["a", [1, 2]],
          ["a", [1, [-1]]],
          ["b", "a"]
        ]);

</script>

<div id="log"></div>
