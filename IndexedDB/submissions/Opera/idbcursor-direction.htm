<!DOCTYPE html>
<title>IDBCursor.direction</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="support.js"></script>

<script>

    function cursor_direction(constant, dir)
    {
        var db,
          t = async_test(document.title + " - " + dir),
          expected = dir ? dir : IDBCursor.NEXT;

        var open_rq = createdb(t);
        console.log("wat-tf?");
        open_rq.onupgradeneeded = function(e) {
            console.log("onupgr needed");
            db = e.target.result;
            var objStore = db.createObjectStore("test");

            objStore.add("data", "key");
            console.log("added data");
        };

        open_rq.onsuccess = t.step_func(function(e) {
            var cursor_rq, count = 0;
            var os = db.transaction("test")
                       .objectStore("test");
            if (dir)
                cursor_rq = os.openCursor(undefined, dir);
            else
                cursor_rq = os.openCursor();

            console.log("succ");
            cursor_rq.onsuccess = t.step_func(function(e) {
                console.log("rq");
                var cursor = e.target.result;

                assert_equals(cursor.direction, constant, 'direction constant');
                assert_equals(cursor.direction, expected, 'direction');
                assert_readonly(cursor, 'direction');

                count++;
                if (count >= 2)
                    t.done();
            });

            var cursor_rq2 = db.transaction("test")
                              .objectStore("test")
                              .openCursor(undefined, constant);

            cursor_rq2.onsuccess = t.step_func(function(e) {
                console.log("rq2");
                var cursor = e.target.result;

                assert_equals(cursor.direction, constant, 'direction constant (second try)');
                assert_equals(cursor.direction, expected, 'direction (second try)');
                assert_readonly(cursor, 'direction');

                count++;
                if (count >= 2)
                    t.done();
            });

        });
        console.log("wat-tf?2");
    }

    cursor_direction("next");
    cursor_direction("next",       IDBCursor.NEXT);
    cursor_direction("prev",       IDBCursor.PREV);
    cursor_direction("nextunique", IDBCursor.NEXT_NO_DUPLICATE);
    cursor_direction("prevunique", IDBCursor.PREV_NO_DUPLICATE);

</script>

<div id="log"></div>
