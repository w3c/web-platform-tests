<!--
fsck, turns out this was wrong, and higher level never give you a key that is == position


[IndexedDB] Specify what happens on using continue on index with duplicate values
-------------------------

Right now (as I read it), the spec allows continuing on an index with the same value as you're currently on. It seems to give you the next value.

It is a weird corner case, but Mozilla is throwing at that stage, and we should spec a behavior. Or maybe clarify it with a note if this behaviour already *is* specified but I can't see it.

Here's what I've been looking at for relevant text:


If direction is NEXT, let found record be the first record in records which satisfy all of the following requirements:

  - If key is defined, the record's key is greater than or equal to key.
  - If position is defined, and source is an object store, the record's key
    is greater than position.
  - If position is defined, and source is an index, the record's key is equal
    to position and the record's value is greater than object store position
    or the record's key is greater than position.
  - If range is defined, the record's key is in range.


-

The testcase is this:

given these records:

> [ { pk: 'p1', name: 'Ada' },
>   { pk: 'p2', name: 'Lisa' },
>   { pk: 'p2-2', name: 'Lisa' } ]
>
> index = createIndex("idx", "name")
> index.openCursor()
>
> -> p1, Ada:  cursor.continue('Lisa')
> -> p2, Lisa: cursor.continue('Lisa') -> throws


Although I would expect it to do:

> position is currently 'Lisa', key is 'Lisa', object store position is { pk: p1, name: Lisa }.
>
>  - Key is defined (Lisa), and I've found a record key that is equal to key
>  - Position is defined (Lisa), source is an index, the record's key is equal to position,
>    and record's value ({ pk: p1, name: Lisa }) is NOT greater than object store position
>    ({ pk: p1, name: Lisa })
>
> So look at next positon/record/object store position, and then:
>
>  - Position is defined (Lisa), source is an index, the record's key is equal to position,
>    and record's value ({ pk: p2, name: Lisa }) *IS* greater than object store position
>    ({ pk: p1, name: Lisa })


So that is how I've been reading the spec.
-->
<!DOCTYPE html>
<title>IDBCursor.continue() - index - continuing using duplicate index keys</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="../support.js"></script>

<script>

    var db,
      t = async_test(),
      records = [ { pKey: "primaryKey_0",   iKey: "indexKey_0" },
                  { pKey: "primaryKey_1",   iKey: "indexKey_1" },
                  { pKey: "primaryKey_1-2", iKey: "indexKey_1" },
                  { pKey: "primaryKey_2",   iKey: "indexKey_2" } ];

    var open_rq = createdb(t);
    open_rq.onupgradeneeded = function(e) {
        db = e.target.result;
        var objStore = db.createObjectStore("test", { keyPath: "pKey" });

        objStore.createIndex("index", "iKey");

        for (var i = 0; i < records.length; i++)
            objStore.add(records[i]);
    };

    open_rq.onsuccess = function(e) {
        var count = 0,
          cursor_rq = db.transaction("test")
                        .objectStore("test")
                        .index("index")
                        .openCursor(undefined, IDBCursor.NEXT);

        cursor_rq.onsuccess = t.step_func(function(e) {
            var cursor = e.target.result,
              record = cursor.value;

            assert_equals(record.pKey, records[count].pKey, "pKey #" + count);
            assert_equals(record.iKey, records[count].iKey, "iKey #" + count);

            assert_equals(cursor.key, records[count].iKey, "cursor.key #" + count);
            assert_equals(cursor.primaryKey, records[count].pKey, "cursor.primaryKey #" + count);

            switch(count) {
            case 0:
                cursor.continue("indexKey_1");
                break;

            case 1:
                // Should be able to go to next duplicate index key
                cursor.continue("indexKey_1");
                break;

            case 2:
                // No more duplicates, this should now be disallowed
                assert_throws("DataError",
                    function() { cursor.continue("indexKey_1"); });

                cursor.continue("indexKey_2");
                break;

            case 3:
                t.done();
                break;

            default:
                assert_unreached("Unexpected count value: " + count);
            }

            count++;
        });
    };

</script>

<div id="log"></div>
