<!DOCTYPE html>
<meta charset=utf-8">
<title>Invalid key</title>
<link rel=help href="http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#key-construct">
<link rel=assert title="A value is said to be a valid key if it is one of the following types: Array JavaScript objects [ECMA-262], DOMString [WEBIDL], Date [ECMA-262] or float [WEBIDL]. However Arrays are only valid keys if every item in the array is defined and is a valid key (i.e. sparse arrays can not be valid keys) and if the Array doesn't directly or indirectly contain itself. Any non-numeric properties are ignored, and thus does not affect whether the Array is a valid key. Additionally, if the value is of type float, it is only a valid key if it is not NaN, and if the value is of type Date it is only a valid key if its [[PrimitiveValue]] internal property, as defined by [ECMA-262], is not NaN. Conforming user agents must support all valid keys as keys.">
<script src=/resources/testharness.js></script>
<script src=/resources/testharnessreport.js></script>
<script src=support.js></script>

<script>
    function invalid_key(desc, key) {
        var t = async_test(document.title + " - " + desc);

        createdb(t).onupgradeneeded = function(e) {
            var objStore = e.target.result.createObjectStore("store");
            try { objStore.add("value", key); } catch(e) { console.log(e) };
            assert_throws('DataError', function() {
                objStore.add("value", key);
            });

            var objStore2 = e.target.result.createObjectStore("store2", { keyPath: ["x", "keypath"] });
            assert_throws('DataError', function() {
                objStore2.add({ x: "value", keypath: key });
            });

            this.done();
        };
    }

    invalid_key('true', true);
    invalid_key('false', false);
    invalid_key('null', null);
    invalid_key('NaN', NaN);
    invalid_key('function()', function() {});
    invalid_key('{ obj: 1 }', { obj: 1 });
    invalid_key('Math', Math );
    invalid_key('[{}]', [{}]);
    invalid_key('[[], [], [], [[ Date ]]]', [ [], [], [], [[ Date ]] ]);

    var sparse = [];
    sparse[10] = "hei";
    invalid_key('sparse array', sparse);

    var sparse2 = [];
    sparse2[0]  = 1;
    sparse2[""] = 2;
    sparse2[2]  = 3;
    invalid_key('sparse array 2', sparse2);

    invalid_key('[[1], [3], [7], [[ sparse array ]]]', [ [1], [3], [7], [[ sparse2 ]] ]);

    var recursive = [];
    recursive.push(recursive);
    invalid_key('array directly contains self', recursive);

    var recursive2 = [];
    recursive2.push([recursive2]);
    invalid_key('array indirectly contains self', recursive2);

    var recursive3 = [recursive];
    invalid_key('array member contains self', recursive3);
</script>

<div id=log></div>
