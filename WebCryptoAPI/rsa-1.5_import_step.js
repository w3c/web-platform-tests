var asnMd5WithRSAEncryption    = new Uint8Array([ 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x04, 0x50, 0x00 ]);

var jwkPrivateDOnly = {
    alg:"RS256",
    d:"zfAYnuMaaUQZ-A0adLQcvmd6w_DHAfHQ4Str1_2Yd-mmkaOMVyGtwa_8s2Z1KSGfFaVBzv1XHP89udQfsajYFKXOcgEsB6ue_mw4CXBXZEqv0KwXHyV_HAqPOcmz6yO1IwLu7NKlMWKwsgbd1nGeR4m1cfn0ZngOw0qbIe9-BXGLNFBCe3e3K9VMArYZ_b44bWwgxr3fna-t0U0tZfJy58Wz8AwEHQop3zd5NFwiTUj-kdXuuDaoy_ZMCuEL_uYdsrF_uz6mzhjoPjf3wTw7DC0Q9ogPmgPbyRxCpu_d5pdu0jUDk7YkyzBYtAp1rHD0eHKYH0n84lllKRpkFFdupQ",
    e:"AQAB",
    ext:true,
    key_ops:["sign"],
    kty:"RSA",
    n:"38hWfCfAp3igOm_FzgjCNm0RQInHAXWcRYMMwt7FPS_2Z287Oov3pNCk19z1W1x6vFH81aONN5o1H03DtTYWssSRDELe37wdF9bE7xyxdrGjwr2XYftzZ_9ETWjfJ3Pb-5pSsYtF0kw5RTiwRSjLc1n3KY3eJHgHqUvAl4bZ07XO4whrkk0pEPR2R9zfwd1Zm7OdzPsgmwOWHm1v23anfd4JK7rbb1W-eIKd_zrLuMGAkmCCMdXcXF516qydoxkH3Lpk18map8FeTIGdTn9xFonLZfryP55cLJ40xK8qunZ6tGWy1YCdXFy3-N6656DkZ0oQZPtiGVjF4r7piLpT-vQ"
};

var oidNames = ["rsaEncryption", "sha1WithRSAEncryption", "sha256WithRSAEncryption", "sha384WithRSAEncryption", "sha512WithRSAEncryption"];

var oid2Array = [  // These match the namesin oidNames
    new Uint8Array([ 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,  ]),
    new Uint8Array([ 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x04,  ]),
    new Uint8Array([ 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05,  ]),
    new Uint8Array([ 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,  ]),
    new Uint8Array([ 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0c,  ]),
    new Uint8Array([ 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0d,  ])
];

var rsaKey = {
    n: new Uint8Array([0xdf, 0xc8, 0x56, 0x7c, 0x27, 0xc0, 0xa7, 0x78, 0xa0, 0x3a, 0x6f, 0xc5, 0xce, 0x08, 0xc2,
        0x36, 0x6d, 0x11, 0x40, 0x89, 0xc7, 0x01, 0x75, 0x9c, 0x45, 0x83, 0x0c, 0xc2, 0xde, 0xc5, 0x3d,
        0x2f, 0xf6, 0x67, 0x6f, 0x3b, 0x3a, 0x8b, 0xf7, 0xa4, 0xd0, 0xa4, 0xd7, 0xdc, 0xf5, 0x5b, 0x5c,
        0x7a, 0xbc, 0x51, 0xfc, 0xd5, 0xa3, 0x8d, 0x37, 0x9a, 0x35, 0x1f, 0x4d, 0xc3, 0xb5, 0x36, 0x16,
        0xb2, 0xc4, 0x91, 0x0c, 0x42, 0xde, 0xdf, 0xbc, 0x1d, 0x17, 0xd6, 0xc4, 0xef, 0x1c, 0xb1, 0x76,
        0xb1, 0xa3, 0xc2, 0xbd, 0x97, 0x61, 0xfb, 0x73, 0x67, 0xff, 0x44, 0x4d, 0x68, 0xdf, 0x27, 0x73,
        0xdb, 0xfb, 0x9a, 0x52, 0xb1, 0x8b, 0x45, 0x93, 0x0e, 0x51, 0x4e, 0x2c, 0x11, 0x4a, 0x32, 0xdc,
        0xd6, 0x7d, 0xca, 0x63, 0x77, 0x89, 0x1e, 0x01, 0xea, 0x52, 0xf0, 0x25, 0xe1, 0xb6, 0x74, 0xed,
        0x73, 0xb8, 0xc2, 0x1a, 0xe4, 0x93, 0x4a, 0x44, 0x3d, 0x1d, 0x91, 0xf7, 0x37, 0xf0, 0x77, 0x56,
        0x66, 0xec, 0xe7, 0x73, 0x3e, 0xc8, 0x26, 0xc0, 0xe5, 0x87, 0x9b, 0x5b, 0xf6, 0xdd, 0xa9, 0xdf,
        0x77, 0x82, 0x4a, 0xee, 0xb6, 0xdb, 0xd5, 0x6f, 0x9e, 0x20, 0xa7, 0x7f, 0xce, 0xb2, 0xee, 0x30,
        0x60, 0x24, 0x98, 0x20, 0x8c, 0x75, 0x77, 0x17, 0x17, 0x9d, 0x7a, 0xab, 0x27, 0x68, 0xc6, 0x41,
        0xf7, 0x2e, 0x99, 0x35, 0xf2, 0x66, 0xa9, 0xf0, 0x57, 0x93, 0x20, 0x67, 0x53, 0x9f, 0xdc, 0x45,
        0xa2, 0x72, 0xd9, 0x7e, 0xbc, 0x8f, 0xe7, 0x97, 0x0b, 0x27, 0x8d, 0x31, 0x2b, 0xca, 0xae, 0x9d,
        0x9e, 0xad, 0x19, 0x6c, 0xb5, 0x60, 0x27, 0x57, 0x17, 0x2d, 0xfe, 0x37, 0xae, 0xb9, 0xe8, 0x39,
        0x19, 0xd2, 0x84, 0x19, 0x3e, 0xd8, 0x86, 0x56, 0x31, 0x78, 0xaf, 0xba, 0x62, 0x2e, 0x94, 0xfe,
                       0xbd]), // value of modulus

    e: new Uint8Array([0x01, 0x00, 0x01]), // public exponent - e

    d: new Uint8Array([0xcd, 0xf0, 0x18, 0x9e, 0xe3, 0x1a, 0x69, 0x44, 0x19, 0xf8, 0x0d, 0x1a, 0x74, 0xb4, 0x1c,
        0xbe, 0x67, 0x7a, 0xc3, 0xf0, 0xc7, 0x01, 0xf1, 0xd0, 0xe1, 0x2b, 0x6b, 0xd7, 0xfd, 0x98, 0x77,
        0xe9, 0xa6, 0x91, 0xa3, 0x8c, 0x57, 0x21, 0xad, 0xc1, 0xaf, 0xfc, 0xb3, 0x66, 0x75, 0x29, 0x21,
        0x9f, 0x15, 0xa5, 0x41, 0xce, 0xfd, 0x57, 0x1c, 0xff, 0x3d, 0xb9, 0xd4, 0x1f, 0xb1, 0xa8, 0xd8,
        0x14, 0xa5, 0xce, 0x72, 0x01, 0x2c, 0x07, 0xab, 0x9e, 0xfe, 0x6c, 0x38, 0x09, 0x70, 0x57, 0x64,
        0x4a, 0xaf, 0xd0, 0xac, 0x17, 0x1f, 0x25, 0x7f, 0x1c, 0x0a, 0x8f, 0x39, 0xc9, 0xb3, 0xeb, 0x23,
        0xb5, 0x23, 0x02, 0xee, 0xec, 0xd2, 0xa5, 0x31, 0x62, 0xb0, 0xb2, 0x06, 0xdd, 0xd6, 0x71, 0x9e,
        0x47, 0x89, 0xb5, 0x71, 0xf9, 0xf4, 0x66, 0x78, 0x0e, 0xc3, 0x4a, 0x9b, 0x21, 0xef, 0x7e, 0x05,
        0x71, 0x8b, 0x34, 0x50, 0x42, 0x7b, 0x77, 0xb7, 0x2b, 0xd5, 0x4c, 0x02, 0xb6, 0x19, 0xfd, 0xbe,
        0x38, 0x6d, 0x6c, 0x20, 0xc6, 0xbd, 0xdf, 0x9d, 0xaf, 0xad, 0xd1, 0x4d, 0x2d, 0x65, 0xf2, 0x72,
        0xe7, 0xc5, 0xb3, 0xf0, 0x0c, 0x04, 0x1d, 0x0a, 0x29, 0xdf, 0x37, 0x79, 0x34, 0x5c, 0x22, 0x4d,
        0x48, 0xfe, 0x91, 0xd5, 0xee, 0xb8, 0x36, 0xa8, 0xcb, 0xf6, 0x4c, 0x0a, 0xe1, 0x0b, 0xfe, 0xe6,
        0x1d, 0xb2, 0xb1, 0x7f, 0xbb, 0x3e, 0xa6, 0xce, 0x18, 0xe8, 0x3e, 0x37, 0xf7, 0xc1, 0x3c, 0x3b,
        0x0c, 0x2d, 0x10, 0xf6, 0x88, 0x0f, 0x9a, 0x03, 0xdb, 0xc9, 0x1c, 0x42, 0xa6, 0xef, 0xdd, 0xe6,
        0x97, 0x6e, 0xd2, 0x35, 0x03, 0x93, 0xb6, 0x24, 0xcb, 0x30, 0x58, 0xb4, 0x0a, 0x75, 0xac, 0x70,
        0xf4, 0x78, 0x72, 0x98, 0x1f, 0x49, 0xfc, 0xe2, 0x59, 0x65, 0x29, 0x1a, 0x64, 0x14, 0x57, 0x6e,
                    0xa5]), // value of d

    p: new Uint8Array([0xfd, 0x00, 0x3e, 0x2a, 0x8d, 0xa6, 0xd3, 0x33, 0xf7, 0xd7, 0xa5, 0x95, 0xe0, 0x2a, 0x47,
                       0xcf, 0x60, 0xcf, 0x7e, 0x91, 0x9f, 0x29, 0x64, 0x21, 0x4e, 0x66, 0xdf, 0x0e, 0xb0, 0xad, 0xe6,
                       0x8b, 0x55, 0x30, 0x34, 0xfc, 0x31, 0xf7, 0x66, 0x81, 0xe9, 0xe2, 0x9a, 0x46, 0x4e, 0x79, 0xca,
                       0x6d, 0x27, 0xae, 0x8b, 0xcd, 0x1b, 0x11, 0xc1, 0x61, 0x2f, 0x64, 0xe6, 0x16, 0x69, 0x8f, 0xff,
                       0xf1, 0x34, 0xa9, 0xc3, 0xbe, 0x99, 0x74, 0x9f, 0x8c, 0x0c, 0x93, 0xd7, 0x84, 0x65, 0xa4, 0xa8,
                       0xca, 0x9e, 0x1e, 0x70, 0xef, 0x13, 0xc0, 0x35, 0x79, 0xee, 0xe8, 0x54, 0x26, 0xa1, 0xa3, 0x10,
                       0x56, 0xd1, 0x62, 0xd4, 0x49, 0xbc, 0x55, 0x2d, 0xa6, 0x00, 0x52, 0x1d, 0xf5, 0x75, 0x46, 0x43,
                       0x89, 0xd5, 0xbb, 0xed, 0x18, 0x2b, 0xf2, 0xf5, 0xbb, 0x36, 0x06, 0x6c, 0xec, 0x8f, 0x49, 0x47,
                       0x9f]), // value of p
    q: new Uint8Array([0xe2, 0x6f, 0x6d, 0xc8, 0xe2, 0x3d, 0xc8, 0x89, 0x84, 0x4c, 0xb3, 0x4b, 0x39, 0x2c, 0x6d,
                       0x67, 0x83, 0x0a, 0xa5, 0xdc, 0xad, 0x27, 0x81, 0x59, 0x9a, 0x93, 0xe6, 0x47, 0x1c, 0x82, 0xe9,
                       0x2f, 0xc8, 0x5a, 0xb0, 0x7e, 0x32, 0x96, 0x77, 0x11, 0x92, 0x29, 0xee, 0x3b, 0x16, 0x4d, 0xa7,
                       0xc8, 0x5d, 0x16, 0xb9, 0xa4, 0xdc, 0x8d, 0x7a, 0x00, 0x7a, 0x51, 0x71, 0xdd, 0xc8, 0x04, 0xcf,
                       0xb3, 0x01, 0xb3, 0xc5, 0xd6, 0x09, 0x0a, 0x75, 0x52, 0x53, 0x82, 0xbc, 0x05, 0xa3, 0x8f, 0xb7,
                       0xcd, 0xb0, 0xa3, 0x40, 0x65, 0x0d, 0x8b, 0xc8, 0x50, 0x81, 0xd9, 0xfe, 0xad, 0xf4, 0xaa, 0xa9,
                       0x44, 0xc3, 0x1b, 0xc4, 0x87, 0x17, 0x62, 0x15, 0x66, 0xd1, 0x0b, 0xaf, 0x38, 0x59, 0xaf, 0xc5,
                       0xdf, 0xbf, 0x4a, 0x08, 0x05, 0x5e, 0xb9, 0x3a, 0xb3, 0x42, 0x20, 0xee, 0x8f, 0x8a, 0x93, 0x4c,
                       0x23]), // value of q
    dp: new Uint8Array([0x6a, 0x4c, 0x02, 0xd2, 0x80, 0x27, 0x5a, 0x4f, 0x58, 0x4f, 0x3b, 0x5b, 0xe8, 0x0d, 0xfb, 0x93,
                        0xce, 0xb9, 0xff, 0x14, 0x91, 0xc9, 0xa3, 0x2f, 0x37, 0x30, 0x93, 0x81, 0x29, 0x8c, 0x36, 0xf3,
                        0xcd, 0x7b, 0xee, 0x97, 0x13, 0x2b, 0x3d, 0xdf, 0x51, 0x74, 0x0a, 0x9b, 0x85, 0x77, 0x38, 0x2c,
                        0x7a, 0x62, 0xa4, 0x8c, 0x2d, 0x56, 0x5d, 0x68, 0x46, 0xb0, 0x5e, 0xd7, 0x85, 0xcc, 0xa1, 0x9d,
                        0x27, 0x22, 0x38, 0x82, 0xc9, 0x18, 0xad, 0xbb, 0xfa, 0xc0, 0xd6, 0xe8, 0xe2, 0x87, 0xb6, 0xff,
                        0x42, 0x45, 0xc9, 0xef, 0x38, 0xde, 0x25, 0xd9, 0xb0, 0x1d, 0xde, 0xd5, 0x48, 0x4e, 0x29, 0x9c,
                        0x40, 0x67, 0x04, 0x88, 0x62, 0x5f, 0x6b, 0x49, 0x76, 0x93, 0x09, 0xd1, 0x4a, 0x4f, 0x96, 0x2a,
                        0xc0, 0x29, 0x2f, 0xe9, 0x5a, 0xf5, 0xbe, 0x76, 0xc4, 0xb1, 0x18, 0x6c, 0x9f, 0x9b, 0x0b, 0x43]), // value of dp
    dq: new Uint8Array([0x0f, 0x50, 0x19, 0xcc, 0x8c, 0x00, 0x41, 0x9f, 0x8b, 0x22, 0xe4, 0xbd, 0x21, 0x90, 0xaf, 0x95,
                        0x60, 0x77, 0x47, 0xe0, 0x34, 0x95, 0x87, 0x59, 0xd7, 0xea, 0x48, 0x98, 0x66, 0x85, 0x33, 0xdf,
                        0xd7, 0x5c, 0xca, 0xb2, 0xbe, 0x19, 0x0e, 0xd4, 0x51, 0x5e, 0x24, 0x8e, 0x3a, 0x63, 0xe6, 0x04,
                        0xd6, 0xc6, 0xc2, 0xa7, 0x33, 0x83, 0x1d, 0xcd, 0x0a, 0x78, 0x97, 0x8a, 0xb8, 0x0c, 0x1b, 0x3f,
                        0xaf, 0xcd, 0xc8, 0x83, 0x40, 0xf9, 0x44, 0x15, 0xdd, 0x2f, 0xea, 0x27, 0x37, 0x78, 0x70, 0xa5,
                        0xa8, 0x5c, 0x61, 0xee, 0x73, 0x8c, 0x10, 0x6f, 0xe1, 0x58, 0x2c, 0xb0, 0xf6, 0xea, 0xd3, 0xa7,
                        0xa2, 0xca, 0x2d, 0xf0, 0x34, 0xd4, 0x9d, 0x3d, 0xe6, 0xc5, 0x33, 0x84, 0x4c, 0x0c, 0x67, 0x05,
                        0x4a, 0x9a, 0x67, 0x10, 0x75, 0xe7, 0x70, 0xe0, 0xce, 0x88, 0x0b, 0x9a, 0x09, 0x75, 0x0c, 0xa1]), // value of dq

    qi: new Uint8Array([0x63, 0x53, 0xec, 0xd4, 0x61, 0xb1, 0x9a, 0x08, 0x66, 0xd8, 0x65, 0x1a, 0x75, 0x7f, 0x89, 0xa2,
                         0x0e, 0xaa, 0xb8, 0x4b, 0x0a, 0xd9, 0xdc, 0xda, 0xaa, 0x9b, 0x61, 0x54, 0xe0, 0xc4, 0x5a, 0x10,
                         0xab, 0x03, 0x0c, 0x47, 0x9b, 0x2a, 0xf5, 0x3b, 0x39, 0xdc, 0x11, 0x42, 0x7a, 0x65, 0x15, 0xa0,
                         0xcd, 0xfd, 0x38, 0x41, 0x96, 0x30, 0xbd, 0x59, 0x93, 0xdb, 0x4f, 0xed, 0x1d, 0x09, 0x85, 0x9d,
                         0x67, 0x8c, 0x63, 0x09, 0xbb, 0xf9, 0xf5, 0xd1, 0x29, 0xe5, 0x5f, 0xce, 0x44, 0xdf, 0x62, 0xf6,
                         0xd3, 0x7e, 0x14, 0x23, 0x9c, 0x55, 0x04, 0xa2, 0x87, 0xde, 0x48, 0x32, 0xa1, 0x98, 0xa9, 0xb4,
                         0x90, 0x5e, 0x76, 0x30, 0xef, 0x83, 0x2e, 0x4a, 0x5a, 0xcf, 0xd4, 0x56, 0x08, 0xb2, 0x48, 0x3f,
                        0x8f, 0xac, 0x5c, 0x9a, 0x3e, 0x98, 0x82, 0x7f, 0x53, 0x8b, 0x47, 0xb8, 0x64, 0x2c, 0x20, 0xc5]), // value of qi
}

var alg1 = {name: "RSASSA-PKCS1-v1_5", hash: "SHA-1" };
var alg256 = {name: "RSASSA-PKCS1-v1_5", hash: "SHA-256" };
var alg384 = {name: "RSASSA-PKCS1-v1_5", hash: "SHA-384" };
var alg512 = {name: "RSASSA-PKCS1-v1_5", hash: "SHA-512" };

var algArray = [null, alg1, alg256, alg384, alg512];
var algArrayName = ["null", "sha-1", "sha256", "sha384", "sha512"];
var jwkAlgs = [ null, "RS1", "RS256", "RS384", "RS512" ];

var extractableNames = ["not-extractable","extractable"];
var extractable = [false, true];


function toBase64(data)
{
    if (data[0] == 0) {
        data = data.subarray(1);
    }
    return base64js.fromByteArrayURL(data);
}

function build_jwk_public(asnPrivateArray)
{
   var key ={};

    key["kty"] = "RSA";
    key["n"] = toBase64(rsaKey["n"]);
    key["e"] = toBase64(rsaKey["e"]);

    key["key_ops"] = ["verify"];
    key["ext"] = true;

    return key;
}

function build_jwk_private(asnPrivateArray)
{
    var key ={};

    key["kty"] = "RSA";
    key["n"] = toBase64(rsaKey["n"]);
    key["e"] = toBase64(rsaKey["e"]);
    key["d"] = toBase64(rsaKey["d"]);
    key["p"] = toBase64(rsaKey["p"]);
    key["q"] = toBase64(rsaKey["q"]);
    key["dp"] = toBase64(rsaKey["dp"]);
    key["dq"] = toBase64(rsaKey["dq"]);
    key["qi"] = toBase64(rsaKey["qi"]);

    key["key_ops"] = ["sign"];
    key["ext"] = true;

    return key;
}

function build_asn_public(asnPrivateArray)
{
    var key = [];

    key.push(new Uint8Array([0x30, 0x82, 0x01, 0x22]));   // SEQUENCE
    key.push(new Uint8Array([0x30, 0x0d]));               //   SEQUENCE
    key.push(oid2Array[0]);                               //      OID
    key.push(new Uint8Array([0x05, 0x00]));               //      NULL
    key = key.concat(
        asn1_encode_bitstring(
            asn1_encode(0x30, [].concat(
                asn1_encode_integer([rsaKey["n"]]),
                asn1_encode_integer([rsaKey["e"]])))));

    return asn1_to_fields(asn1_to_uint8(key));
}

function import_test_fail(t, format, keyData, algorithm, extractable, keyUsages, errorText) {
    self.crypto.subtle.importKey(format, keyData, algorithm, extractable, keyUsages).then(
        t.step_func(function(newKey) {
            assert_unreached("Import succeeded and should have failed");
            t.done();
        }),
        t.step_func(function(err) {
            assert_equals(err.name, errorText, "Expected to get error " + errorText);
            t.done();
        })
    );
}

function build_asn_private(keyMap)
{
    // SEQUENCE {
    //    version:0,
    //    algorithm: SEQUENCE {
    //       OID,
    //       parameters
    //    }
    //    OCTET STRING {
    //       SEQUENCE {
    //          version: 0,
    //          n: INTEGER,
    //          e: INTEGER,
    //          d: INTEGER,
    //          p: INTEGER,
    //          q: INTEGER,
    //          dp: INTEGER,
    //          dq: INTEGER,
    //          qi: INTEGER
    //       }
    //    }
    //  }

    var x = asn1_encode(0x30, [].concat(
        asn1_encode_integer([new Uint8Array([0])]),
        asn1_encode_integer([keyMap["n"]]),
        asn1_encode_integer([keyMap["e"]]),
        asn1_encode_integer([keyMap["d"]]),
        asn1_encode_integer([keyMap["p"]]),
        asn1_encode_integer([keyMap["q"]]),
        asn1_encode_integer([keyMap["dp"]]),
        asn1_encode_integer([keyMap["dq"]]),
        asn1_encode_integer([keyMap["qi"]])));
    x = asn1_encode(0x4, x);
    var algorithmID = asn1_encode(0x30, [].concat(
        oid2Array[0], new Uint8Array([0x5, 0x0])));
    x = asn1_encode(0x30, [].concat(
        asn1_encode_integer([new Uint8Array([0])]),
        algorithmID,
        x));
    return asn1_to_fields(asn1_to_uint8(x));
}


//Tests - General

//* Algorithm w/o import functionality
//* Unknown algorithm
//* json for pkcs8 and for spki
//* byte array for jwk
//* secret w/o usages



//RSA v1.5


//* private w/o usages
//* secret as format
//
//
//** jwk

function run_jwk_import()
{
    var t;
    var jwkPrivate = build_jwk_private(rsaKey);
    var jwkPublic = build_jwk_public(rsaKey);
    var jwk;

    //* d present and usages contins "verify"
    t = async_test("RSASSA import jwk usages=[\"verify\",\"sign\"]");
    import_test_fail(t, "jwk", jwkPrivate, alg256, true, ["verify","sign"], "SyntaxError" );

    //* d absent and usages contains "sign"
    t = async_test("RSASSA import public jwk usages=[\"verify\",\"sign\"]");
    import_test_fail(t, "jwk", jwkPublic, alg256, true, ["verify","sign"], "SyntaxError" );

    //* kty is absent
    t = async_test("RSASSA import public jwk no kty");
    jwk = build_jwk_public(rsaKey);
    delete jwk["kty"];
    import_test_fail(t, "jwk", jwk, alg256, true, ["verify"], "DataError" );

    //* kty is not RSA
    t = async_test("RSASSA import public jwk kty='DH'");
    jwk = build_jwk_public(rsaKey);
    jwk["kty"]="DH";
    import_test_fail(t, "jwk", jwk, alg256, true, ["verify"], "DataError" );

    //* kty is absent
    t = async_test("RSASSA import private jwk no kty");
    jwk = build_jwk_private(rsaKey);
    delete jwk["kty"];
    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );

    //* kty is not RSA
    t = async_test("RSASSA import private jwk kty='DH'");
    jwk = build_jwk_private(rsaKey);
    jwk["kty"]="DH";
    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );

    //* use present and is not "sig"
    t = async_test("RSASSA import public jwk use='enc'");
    jwk = build_jwk_public(rsaKey);
    jwk["use"]="enc";
    import_test_fail(t, "jwk", jwk, alg256, true, ["verify"], "DataError" );

    //* use present and is not "sig"
    t = async_test("RSASSA import private jwk use='enc'");
    jwk = build_jwk_private(rsaKey);
    jwk["use"]="enc";
    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );

    //* key_ops present and is invalid per JWK
//    t = async_test("RSASSA import private jwk key_ops subset");
//    jwk = build_jwk_private(rsaKey);
//    jwk["use"]=["sig"];
//    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );

    //* key_ops present and does not contain all of usages passed in
    t = async_test("RSASSA import private jwk key_ops subset");
    jwk = build_jwk_private(rsaKey);
    jwk["key_ops"]=[];
    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );

    //* hash algorithm does not match passed in
    t = async_test("RSASSA import private jwk key_ops wrong hash alg");
    jwk = build_jwk_private(rsaKey);
    jwk["alg"]="RS1";
    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );

    //* md5withRSAEncryption
    //* bad hash algorithm passed in with alg absent
    //* d present and one or more items absent
    jwk = build_jwk_private(rsaKey);
    delete jwk["qi"];
    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );

    //* d absent and one or more items present
    jwk = build_jwk_private(rsaKey);
    delete jwk["d"];
    import_test_fail(t, "jwk", jwk, alg256, true, ["sign"], "DataError" );
}

//
//** Size of imported data is too small
//** Size of imported data is too large

function run_pkcs8_import()
{
    var privKey = build_jwk_private(rsaKey);
    var pubKey = build_jwk_private(pubKey);

    //* conains usage not "sign"
    t = async_test("RSASSA import pkcs8 usages=[\"verify\",\"sign\"]");
    import_test_fail(t, "pkcs8",privKey , alg256, true, ["verify","sign"], "SyntaxError" );

    //* conains usage not "sign"
    t = async_test("RSASSA import pkcs8 usages=[\"verify\"]");
    import_test_fail(t, "pkcs8",privKey , alg256, true, ["verify"], "SyntaxError" );

    //* private key structure does not parse  < bad structure, extra data>
    //* Mismatch of hash algorithms w/ the private key data
    //*  Does not work given that only rsaEncryption can be used

    //* Pass in hash not being a hash and rsaEncryption
    t = async_test("RSASSA import pkcs8 hash='aes-gcm'");
    import_test_fail(t, "pkcs8",privKey , {name: "RSASSA-PKCS1-v1_5", hash: "AES-GCM" }, true, ["sign"], "DataError" );

    //* fail parsing RSA Private data structure <bad struture, extra data>
    t = async_test("RSASSA import pkcs8 extra asn.1 byte");
    var rgb = [privKey, new Uint8Array([0])];
    import_test_fail(t, "pkcs8", rgb , alg256, true, ["sign"], "DataError" );

    //* empty usages
    t = async_test("RSASSA import pkcs8 usage=[]");
    import_test_fail(t, "pkcs8", privKey , alg256, true, [], "SyntaxError" );

    //  Public key
    t = async_test("RSASSA import pkcs8 public key structure");
    import_test_fail(t, "pkcs8", pubKey , alg256, true, [], "DataError" );
}

function run_spki_import()
{
    var pubKey = build_jwk_private(pubKey);

    //* conains usage not "sign"
    t = async_test("RSASSA import spki usages=[\"verify\",\"sign\"]");
    import_test_fail(t, "spki", pubKey , alg256, true, ["verify","sign"], "SyntaxError" );

    //* conains usage not "sign"
    t = async_test("RSASSA import spki usages=[\"sign\"]");
    import_test_fail(t, "spki", pubKey , alg256, true, ["sign"], "SyntaxError" );

//* spki that does not parse < bad structure, extra data>

    //* spki for non rsa algorithm

    //* fail parsing RSA public data structure <bad struture, extra data>
    t = async_test("RSASSA import spki extra asn.1 byte");
    var rgb = [pubKey, new Uint8Array([0])];
    import_test_fail(t, "spki", rgb , alg256, true, ["verify"], "DataError" );
}

function run_test() {
    run_jwk_import();
    run_pkcs8_import();
    run_spki_import();
}
